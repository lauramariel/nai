{"status":{},"spec":{"name":"next25-nkp-nai","description":"[NAI Dashboard](@@(Admin.NAI_UI_ENDPOINT)@@)\n[NKP Console](@@{Admin.NKP_DASHBOARD_URL}@@)\n\nCredentials:\n - username: @@{Admin.NKP_DASHBOARD_USERNAME}@@\n - password: @@{Admin.NKP_DASHBOARD_PASSWORD}@@\n\n**NOTE**: It is recommended to configure an identity provider on first login and rotate the dashboard password afterwards ([more info](https:\/\/docs.d2iq.com\/dkp\/@@{DKP_DOC_VERSION}@@\/pre-provisioned-verify-install-and-log-in-to-ui#id-(@@{DKP_DOC_VERSION}@@)Pre-provisioned:VerifyInstallandLogintoUI-LogintotheUI))\n    ","resources":{"service_definition_list":[{"name":"Admin","description":"Admin machine","variable_list":[{"type":"LOCAL","name":"NKP_DASHBOARD_URL","description":"","is_hidden":false,"is_mandatory":false,"data_type":"BASE","val_type":"STRING","label":"","attrs":{"type":""},"value":""},{"type":"LOCAL","name":"NKP_DASHBOARD_USERNAME","description":"","is_hidden":false,"is_mandatory":false,"data_type":"BASE","val_type":"STRING","label":"","attrs":{"type":""},"value":""},{"type":"LOCAL","name":"NKP_DASHBOARD_PASSWORD","description":"","is_hidden":false,"is_mandatory":false,"data_type":"BASE","val_type":"STRING","label":"","attrs":{"type":""},"value":""},{"type":"LOCAL","name":"NUS_FS_UUID","description":"","is_hidden":false,"is_mandatory":false,"data_type":"BASE","val_type":"STRING","label":"","attrs":{"type":""},"value":""},{"type":"LOCAL","name":"NAI_UI_ENDPOINT","description":"","options":{"type":"PREDEFINED","choices":[]},"is_hidden":false,"is_mandatory":false,"data_type":"BASE","val_type":"STRING","label":"","attrs":{"type":""},"value":""}],"action_list":[{"type":"system","name":"action_create","description":"System action for creating an application","runbook":{"name":"Admin___create___runbook","description":"","task_definition_list":[{"type":"DAG","name":"Admin___create___dag","description":"","attrs":{"type":"","edges":[]},"child_tasks_local_reference_list":[],"variable_list":[],"target_any_local_reference":{"name":"Admin","kind":"app_service"},"timeout_secs":"0","retries":"0","inherit_target":false}],"main_task_local_reference":{"name":"Admin___create___dag","kind":"app_task"},"variable_list":[]},"critical":true},{"type":"system","name":"action_start","description":"System action for starting an application","runbook":{"name":"Admin___start___runbook","description":"","task_definition_list":[{"type":"DAG","name":"Admin___start___dag","description":"","attrs":{"type":"","edges":[]},"child_tasks_local_reference_list":[],"variable_list":[],"target_any_local_reference":{"name":"Admin","kind":"app_service"},"timeout_secs":"0","retries":"0","inherit_target":false}],"main_task_local_reference":{"name":"Admin___start___dag","kind":"app_task"},"variable_list":[]},"critical":true},{"type":"system","name":"action_stop","description":"System action for stopping an application","runbook":{"name":"Admin___stop___runbook","description":"","task_definition_list":[{"type":"DAG","name":"Admin___stop___dag","description":"","attrs":{"type":"","edges":[]},"child_tasks_local_reference_list":[],"variable_list":[],"target_any_local_reference":{"name":"Admin","kind":"app_service"},"timeout_secs":"0","retries":"0","inherit_target":false}],"main_task_local_reference":{"name":"Admin___stop___dag","kind":"app_task"},"variable_list":[]},"critical":true},{"type":"system","name":"action_delete","description":"System action for deleting an application. Deletes created VMs as well","runbook":{"name":"Admin___delete___runbook","description":"","task_definition_list":[{"type":"DAG","name":"Admin___delete___dag","description":"","attrs":{"type":"","edges":[]},"child_tasks_local_reference_list":[{"name":"Delete NKP clusters","kind":"app_task"}],"variable_list":[],"target_any_local_reference":{"name":"Admin","kind":"app_service"},"timeout_secs":"0","retries":"0","inherit_target":false},{"type":"CALL_RUNBOOK","name":"Delete NKP clusters","description":"","attrs":{"type":"","runbook_reference":{"name":"Admin_NkpDeleteClusters_runbook","kind":"app_runbook"},"inarg_list":[]},"child_tasks_local_reference_list":[],"variable_list":[],"target_any_local_reference":{"name":"Admin","kind":"app_service"},"timeout_secs":"0","retries":"0","inherit_target":false}],"main_task_local_reference":{"name":"Admin___delete___dag","kind":"app_task"},"variable_list":[]},"critical":true},{"type":"system","name":"action_restart","description":"System action for restarting an application","runbook":{"name":"Admin___restart___runbook","description":"","task_definition_list":[{"type":"DAG","name":"Admin___restart___dag","description":"","attrs":{"type":"","edges":[]},"child_tasks_local_reference_list":[],"variable_list":[],"target_any_local_reference":{"name":"Admin","kind":"app_service"},"timeout_secs":"0","retries":"0","inherit_target":false}],"main_task_local_reference":{"name":"Admin___restart___dag","kind":"app_task"},"variable_list":[]},"critical":true},{"type":"system","name":"action_soft_delete","description":"System action for deleting an application. Does not delete created VMs","runbook":{"name":"Admin___soft_delete___runbook","description":"","task_definition_list":[{"type":"DAG","name":"Admin___soft_delete___dag","description":"","attrs":{"type":"","edges":[]},"child_tasks_local_reference_list":[],"variable_list":[],"target_any_local_reference":{"name":"Admin","kind":"app_service"},"timeout_secs":"0","retries":"0","inherit_target":false}],"main_task_local_reference":{"name":"Admin___soft_delete___dag","kind":"app_task"},"variable_list":[]},"critical":true},{"type":"user","name":"InstallDeps","description":"","runbook":{"name":"Admin_InstallDeps_runbook","description":"","task_definition_list":[{"type":"DAG","name":"Admin_InstallDeps_dag","description":"","attrs":{"type":"","edges":[{"type":"","from_task_reference":{"name":"Install NKP CLI","kind":"app_task"},"to_task_reference":{"name":"Create environment variables","kind":"app_task"},"edge_type":"user_defined"}]},"child_tasks_local_reference_list":[{"name":"Add SSH key","kind":"app_task"},{"name":"Install NKP CLI","kind":"app_task"},{"name":"Create environment variables","kind":"app_task"}],"variable_list":[],"target_any_local_reference":{"name":"Admin","kind":"app_service"},"timeout_secs":"0","retries":"0","inherit_target":false},{"type":"EXEC","name":"Add SSH key","description":"","attrs":{"type":"","script":"#!\/usr\/bin\/env bash\nset -euo pipefail\nIFS=$'\\n\\t'\n\nif [ ! -f ~\/.ssh\/id_rsa ]; then\n    echo '@@{CRED_SSH.secret}@@' > ~\/.ssh\/id_rsa\n    chmod 600 ~\/.ssh\/id_rsa\n\n    echo '@@{CRED_SSH.public_key}@@' > ~\/.ssh\/id_rsa.pub\nfi\n","script_type":"sh","command_line_args":"","exit_status":[]},"child_tasks_local_reference_list":[],"variable_list":[],"target_any_local_reference":{"name":"Admin","kind":"app_service"},"timeout_secs":"0","retries":"0","inherit_target":false},{"type":"EXEC","name":"Install NKP CLI","description":"","attrs":{"type":"","script":"#!\/usr\/bin\/env bash\nset -euo pipefail\nIFS=$'\\n\\t'\n\ncat <<EOF >~\/.env\nexport NKP_BINARY_URL='@@{NKP_BINARY_URL}@@'\nEOF\n\nsource ~\/.env\n\n# Download and install DKP binary\n# curl \"https:\/\/downloads.d2iq.com\/dkp\/${DKP_VERSION}\/dkp_${DKP_VERSION}_linux_amd64.tar.gz\" -o dkp.tar.gz\n\n\n# Download and install NKP binary\ncurl -fsSL \"${NKP_BINARY_URL}\" | sudo tar xz -C \/usr\/local\/bin -- nkp\n\nnkp version","script_type":"sh","command_line_args":"","exit_status":[]},"child_tasks_local_reference_list":[],"variable_list":[],"target_any_local_reference":{"name":"Admin","kind":"app_service"},"timeout_secs":"0","retries":"0","inherit_target":false},{"type":"EXEC","name":"Create environment variables","description":"","attrs":{"type":"","script":"#!\/usr\/bin\/env bash\nset -euo pipefail\nIFS=$'\\n\\t'\n\ncat <<EOF >>~\/.env\n# NKP\nexport NKP_VERSION=$(nkp version -o=json |jq -r '.nkp.gitVersion')\nexport CLUSTER_NAME=\"@@{CLUSTER_NAME}@@\"\nexport NUTANIX_USER=\"@@{CRED_PC.username}@@\"\nexport NUTANIX_PASSWORD=\"@@{CRED_PC.secret}@@\"\nexport NUTANIX_ENDPOINT=\"@@{PC_ADDRESS}@@\"\nexport NUTANIX_PORT=\"@@{PC_PORT}@@\"\nexport MGMT_LB_IP_RANGE_STARTS=\"@@{MGMT_LB_IP_RANGE_STARTS}@@\"\nexport MGMT_LB_IP_RANGE_ENDS=\"@@{MGMT_LB_IP_RANGE_ENDS}@@\"\nexport CONTROL_PLANE_VIP_ADDRESS=\"@@{CONTROL_PLANE_VIP_ADDRESS}@@\"\nexport NUTANIX_MACHINE_TEMPLATE_IMAGE_NAME=\"@@{MACHINE_TEMPLATE_IMAGE_NAME}@@\"\nexport NUTANIX_PRISM_ELEMENT_CLUSTER_NAME=\"@@{PRISM_ELEMENT_CLUSTER_NAME}@@\"\nexport NUTANIX_SUBNET_NAME=\"@@{SUBNET_NAME}@@\"\nexport NUTANIX_STORAGE_CONTAINER_NAME=\"@@{STORAGE_CONTAINER_NAME}@@\"\nexport REGISTRY_MIRROR_URL=\"@@{CONTAINER_REGISTRY_MIRROR}@@\"\nexport NO_COLOR=1\nexport MGMT_LB_IP_RANGE_USERS_STARTS=\"@@{MGMT_LB_IP_RANGE_USERS_STARTS}@@\"\nexport MGMT_LB_IP_RANGE_USERS_ENDS=\"@@{MGMT_LB_IP_RANGE_USERS_ENDS}@@\"\n# LDAP\nexport DOMAIN=@@{DOMAIN}@@\nexport BINDDN='@@{BINDDN}@@'\nexport BINDPW='@@{BINDPW}@@'\nexport LDAP_HOST=@@{LDAP_HOST}@@\nexport LDAP_PORT='@@{LDAP_PORT}@@'\nexport NO_SSL='@@{NO_SSL}@@'\nexport SKIP_SSL_VERIFICATION='@@{SKIP_SSL_VERIFICATION}@@'\nexport START_TLS='@@{START_TLS}@@'\nexport LDAP_SEARCH_USERS='@@{LDAP_SEARCH_USERS}@@'\nexport LDAP_SEARCH_GROUPS='@@{LDAP_SEARCH_GROUPS}@@'\n# Management Workspace\nexport MANAGEMENT_WORKSPACE_APPS='@@{MANAGEMENT_WORKSPACE_APPS}@@'\n# Default Workspace\nexport INFRA_PROVIDER_NAME=pc\nexport DEFAULT_WORKSPACE_APPS='@@{DEFAULT_WORKSPACE_APPS}@@'\n# CSI Files\nexport PE_VIP_ADDRESS=@@{PE_VIP_ADDRESS}@@\nexport NUS_FS_NAME=@@{NUS_FS_NAME}@@\nexport NUS_FS_API_USER=@@{NUS_FS_API_USER}@@\nexport NUS_FS_API_PASSWORD=@@{NUS_FS_API_PASSWORD}@@\nexport FILES_CREDS_STRING=\"@@{NUS_FS_NAME}@@.ntnxlab.local:@@{NUS_FS_API_USER}@@:@@{NUS_FS_API_PASSWORD}@@\"\n# NAI\nexport NAI_CORE_VERSION=\"@@{NAI_CORE_VERSION}@@\"\nexport DOCKER_USERNAME=\"@@{DOCKER_USERNAME}@@\"\nexport DOCKER_PASSWORD=\"@@{DOCKER_PW}@@\"\nexport DOCKER_EMAIL=\"@@{DOCKER_EMAIL}@@\"\nexport NKP_WORKSPACE=kommander-workspace\nexport NKP_NAMESPACE=kommander\nEOF","script_type":"sh","command_line_args":"","exit_status":[]},"child_tasks_local_reference_list":[],"variable_list":[],"target_any_local_reference":{"name":"Admin","kind":"app_service"},"timeout_secs":"0","retries":"0","inherit_target":false}],"main_task_local_reference":{"name":"Admin_InstallDeps_dag","kind":"app_task"},"variable_list":[]},"critical":false},{"type":"user","name":"ConfigureFiles","description":"","runbook":{"name":"Admin_ConfigureFiles_runbook","description":"","task_definition_list":[{"type":"DAG","name":"Admin_ConfigureFiles_dag","description":"","attrs":{"type":"","edges":[{"type":"","from_task_reference":{"name":"Get NUS FS uuid","kind":"app_task"},"to_task_reference":{"name":"Create NUS FS API user","kind":"app_task"},"edge_type":"user_defined"},{"type":"","from_task_reference":{"name":"Create NUS FS API user","kind":"app_task"},"to_task_reference":{"name":"Create FS StorageClass manifest","kind":"app_task"},"edge_type":"user_defined"}]},"child_tasks_local_reference_list":[{"name":"Get NUS FS uuid","kind":"app_task"},{"name":"Create NUS FS API user","kind":"app_task"},{"name":"Create FS StorageClass manifest","kind":"app_task"}],"variable_list":[],"target_any_local_reference":{"name":"Admin","kind":"app_service"},"timeout_secs":"0","retries":"0","inherit_target":false},{"type":"SET_VARIABLE","name":"Get NUS FS uuid","description":"","attrs":{"type":"","script":"PC_ADDRESS = \"@@{PC_ADDRESS}@@\"\nPC_PORT = \"@@{PC_PORT}@@\"\nPC_USERNAME = \"@@{CRED_PC.username}@@\" \nPC_PASSWORD = \"@@{CRED_PC.secret}@@\"\nNUS_FS_NAME = \"@@{NUS_FS_NAME}@@\"\n\nimport requests, base64\nfrom requests.packages.urllib3.exceptions import InsecureRequestWarning\n\nrequests.packages.urllib3.disable_warnings(InsecureRequestWarning)\n\nBASIC_AUTH = \"{}:{}\".format(PC_USERNAME,PC_PASSWORD).encode(\"utf-8\")\nB64_AUTH = base64.b64encode(BASIC_AUTH).decode()\n\nPC_URL = \"https:\/\/{}:{}\".format(PC_ADDRESS,PC_PORT)\n\nHEADERS = {\n    \"Authorization\": \"Basic {}\".format(B64_AUTH),\n    \"Content-Type\": \"application\/json\"\n}\n\ndef get_fs_uuid_by_name(fs_name):\n    api_endpoint = \"\/\".join([\n        PC_URL,\n        \"api\/files\/v4.0.a2\/config\/file-servers?$filter=name eq '{}'\".format(fs_name),\n        ]\n    )\n\n    try:\n        resp = requests.get(\n            url=api_endpoint,\n            headers=HEADERS,\n            verify=False\n        )\n        resp.raise_for_status()\n\n        data = resp.json()\n\n        if len(data[\"data\"]) == 1:\n            return data[\"data\"][0][\"extId\"]\n        else:\n            raise Exception(\"File server not found.\")\n\n\n    except requests.exceptions.HTTPError as err:\n        print(resp.text)\n        raise Exception(err)\n\nprint(\"NUS_FS_UUID={}\".format(get_fs_uuid_by_name(NUS_FS_NAME)))","script_type":"static_py3","exit_status":[],"eval_scope":"local","eval_variables":["NUS_FS_UUID"]},"child_tasks_local_reference_list":[],"variable_list":[],"target_any_local_reference":{"name":"Admin","kind":"app_service"},"timeout_secs":"0","retries":"0","inherit_target":false},{"type":"EXEC","name":"Create NUS FS API user","description":"","attrs":{"type":"","script":"PC_ADDRESS = \"@@{PC_ADDRESS}@@\"\nPC_PORT = \"@@{PC_PORT}@@\"\nPC_USERNAME = \"@@{CRED_PC.username}@@\"\nPC_PASSWORD = \"@@{CRED_PC.secret}@@\"\nNUS_FS_UUID = \"@@{NUS_FS_UUID}@@\"\nNUS_FS_API_USER = \"@@{NUS_FS_API_USER}@@\"\nNUS_FS_API_PASSWORD = \"@@{NUS_FS_API_PASSWORD}@@\"\n\n\n#from time import sleep as sleep # Ignore this line when copy\/paste to Escript\n\nimport requests, base64\nfrom requests.packages.urllib3.exceptions import InsecureRequestWarning\n\nrequests.packages.urllib3.disable_warnings(InsecureRequestWarning)\n\nBASIC_AUTH = \"{}:{}\".format(PC_USERNAME,PC_PASSWORD).encode(\"utf-8\")\nB64_AUTH = base64.b64encode(BASIC_AUTH).decode()\n\nPC_URL = \"https:\/\/{}:{}\".format(PC_ADDRESS,PC_PORT)\n\nHEADERS = {\n    \"Authorization\": \"Basic {}\".format(B64_AUTH),\n    \"Content-Type\": \"application\/json\"\n}\n\ndef retry_task(task_function, max_retries=3, base_delay=1, max_delay=10, *args, **kwargs):\n    retries = 0\n    delay = base_delay\n    while retries < max_retries:\n        try:\n            result = task_function(*args, **kwargs)\n            return result  # If the task succeeds, return its result\n        except Exception as e:\n            print(\"Attempt {} failed:\".format(retries + 1), e)\n            retries += 1\n            if retries < max_retries:\n                print(\"Retrying...\")\n                sleep(delay)  # Wait for the current delay\n                delay = min(delay * 2, max_delay)  # Exponential backoff\n    raise Exception(\"Task failed after {} attempts\".format(max_retries))\n\ndef create_api_user(fs_uuid, user, password):\n    payload = {\n        \"name\": user,\n        \"password\": password\n    }\n\n    api_endpoint = \"\/\".join([\n        PC_URL,\n        \"api\/files\/v4.0.a4\/config\/file-servers\",\n        fs_uuid,\n        \"users\",]\n    )\n\n    try:\n        resp = requests.post(\n            url=api_endpoint,\n            json=payload,\n            headers=HEADERS,\n            verify=False\n        )\n        resp.raise_for_status()\n\n        return \"Created user: {}\".format(user)\n\n    except requests.exceptions.HTTPError as err:\n        error_group = resp.json().get(\"data\", {}).get(\"error\", [{}])[0].get(\"errorGroup\", \"\")\n        if error_group == \"USER_ALREADY_EXISTS\":\n            return \"USER_ALREADY_EXISTS\"\n        print(resp.text)\n        raise Exception(err)\n\ntry:\n    result = retry_task(create_api_user, max_retries=10, base_delay=2, max_delay=15, fs_uuid=NUS_FS_UUID, user=NUS_FS_API_USER, password=NUS_FS_API_PASSWORD)\n    print(result)\nexcept Exception as err:\n    print(\"Error:\", err)\n    raise Exception(err)\n\n","script_type":"static_py3","command_line_args":"","exit_status":[]},"child_tasks_local_reference_list":[],"variable_list":[],"target_any_local_reference":{"name":"Admin","kind":"app_service"},"timeout_secs":"0","retries":"0","inherit_target":false},{"type":"EXEC","name":"Create FS StorageClass manifest","description":"","attrs":{"type":"","script":"#!\/usr\/bin\/env bash\nset -euo pipefail\nIFS=$'\\n\\t'\n\nsource ~\/.env\n\ncat <<EOF > ~\/files_sc.yaml\napiVersion: v1\nkind: Secret\nmetadata:\n  name: nutanix-csi-credentials-files\n  namespace: ntnx-system\ntype: Opaque\nstringData:\n# Provide Nutanix Prism Element credentials which is a default UI credential separated by colon in \"key:\".\n# Provide Nutanix File Server credentials which is a REST API user created on File server UI separated by colon in \"files-key:\".\n  key: \"$PE_VIP_ADDRESS:$NUTANIX_PORT:$NUTANIX_USER:$NUTANIX_PASSWORD\"\n  files-key: \"$NUS_FS_NAME.$DOMAIN:$NUS_FS_API_USER:$NUS_FS_API_PASSWORD\"\n---\nallowVolumeExpansion: true\napiVersion: storage.k8s.io\/v1\nkind: StorageClass\nmetadata:\n  name: nutanix-files\nparameters:\n  dynamicProv: ENABLED\n  nfsServerName: $NUS_FS_NAME\n  nfsServer: $NUS_FS_NAME.$DOMAIN\n  csi.storage.k8s.io\/controller-expand-secret-name: nutanix-csi-credentials-files\n  csi.storage.k8s.io\/controller-expand-secret-namespace: ntnx-system\n  csi.storage.k8s.io\/node-publish-secret-name: nutanix-csi-credentials-files\n  csi.storage.k8s.io\/node-publish-secret-namespace: ntnx-system\n  csi.storage.k8s.io\/provisioner-secret-name: nutanix-csi-credentials-files\n  csi.storage.k8s.io\/provisioner-secret-namespace: ntnx-system\n  storageType: NutanixFiles\nprovisioner: csi.nutanix.com\nEOF","script_type":"sh","command_line_args":"","exit_status":[]},"child_tasks_local_reference_list":[],"variable_list":[],"target_any_local_reference":{"name":"Admin","kind":"app_service"},"timeout_secs":"0","retries":"0","inherit_target":false}],"main_task_local_reference":{"name":"Admin_ConfigureFiles_dag","kind":"app_task"},"variable_list":[]},"critical":false},{"type":"user","name":"InstallNkpCluster","description":"","runbook":{"name":"Admin_InstallNkpCluster_runbook","description":"","task_definition_list":[{"type":"DAG","name":"Admin_InstallNkpCluster_dag","description":"","attrs":{"type":"","edges":[]},"child_tasks_local_reference_list":[{"name":"Create NKP management cluster","kind":"app_task"}],"variable_list":[],"target_any_local_reference":{"name":"Admin","kind":"app_service"},"timeout_secs":"0","retries":"0","inherit_target":false},{"type":"EXEC","name":"Create NKP management cluster","description":"","attrs":{"type":"","script":"#!\/usr\/bin\/env bash\nset -euo pipefail\nIFS=$'\\n\\t'\n\nsource ~\/.env\n\ntime nkp create cluster nutanix -c $CLUSTER_NAME \\\n--kind-cluster-image $REGISTRY_MIRROR_URL\/mesosphere\/konvoy-bootstrap:$NKP_VERSION \\\n--endpoint https:\/\/$NUTANIX_ENDPOINT:$NUTANIX_PORT \\\n--insecure \\\n--control-plane-replicas 1 \\\n--control-plane-vcpus 8 \\\n--control-plane-memory 32 \\\n--worker-vcpus 16 \\\n--worker-memory 64 \\\n--vm-image $NUTANIX_MACHINE_TEMPLATE_IMAGE_NAME \\\n--kubernetes-service-load-balancer-ip-range $MGMT_LB_IP_RANGE_STARTS-$MGMT_LB_IP_RANGE_ENDS \\\n--control-plane-endpoint-ip $CONTROL_PLANE_VIP_ADDRESS \\\n--control-plane-prism-element-cluster $NUTANIX_PRISM_ELEMENT_CLUSTER_NAME \\\n--control-plane-subnets $NUTANIX_SUBNET_NAME \\\n--worker-prism-element-cluster $NUTANIX_PRISM_ELEMENT_CLUSTER_NAME \\\n--worker-subnets $NUTANIX_SUBNET_NAME \\\n--csi-storage-container $NUTANIX_STORAGE_CONTAINER_NAME \\\n--registry-mirror-url http:\/\/$REGISTRY_MIRROR_URL \\\n--ssh-public-key-file  ~\/.ssh\/id_rsa.pub \\\n--csi-hypervisor-attached-volumes=false \\\n--self-managed\n\nmkdir -p ~\/.kube\ncp $CLUSTER_NAME.conf ~\/.kube\/config","script_type":"sh","command_line_args":"","exit_status":[]},"child_tasks_local_reference_list":[],"variable_list":[],"target_any_local_reference":{"name":"Admin","kind":"app_service"},"timeout_secs":"0","retries":"0","inherit_target":false}],"main_task_local_reference":{"name":"Admin_InstallNkpCluster_dag","kind":"app_task"},"variable_list":[]},"critical":false},{"type":"user","name":"ConfigureNkpCluster","description":"","runbook":{"name":"Admin_ConfigureNkpCluster_runbook","description":"","task_definition_list":[{"type":"DAG","name":"Admin_ConfigureNkpCluster_dag","description":"","attrs":{"type":"","edges":[]},"child_tasks_local_reference_list":[{"name":"Configure IDP LDAP","kind":"app_task"},{"name":"Install NKP license","kind":"app_task"},{"name":"Add LB IPs","kind":"app_task"},{"name":"Enable applications","kind":"app_task"},{"name":"Create Files SC","kind":"app_task"}],"variable_list":[],"target_any_local_reference":{"name":"Admin","kind":"app_service"},"timeout_secs":"0","retries":"0","inherit_target":false},{"type":"EXEC","name":"Configure IDP LDAP","description":"","attrs":{"type":"","script":"#!\/usr\/bin\/env bash\nset -euo pipefail\nIFS=$'\\n\\t'\n\nsource ~\/.env\n\ncat <<EOF | kubectl apply -f -\napiVersion: dex.mesosphere.io\/v1alpha1\nkind: Connector\nmetadata:\n  name: nutanix-ldap-identity-provider\n  namespace: kommander\nspec:\n  displayName: ${DOMAIN}\n  enabled: true\n  ldap:\n    bindDN: ${BINDDN}\n    bindPW: ${BINDPW}\n    host: ${LDAP_HOST}:${LDAP_PORT}\n    insecureNoSSL: ${NO_SSL}\n    insecureSkipVerify: ${SKIP_SSL_VERIFICATION}\n    startTLS: ${START_TLS}\n    userSearch:\n      baseDN: ${LDAP_SEARCH_USERS}\n      emailAttr: userPrincipalName\n      emailSuffix: \"\"\n      filter: (objectClass=person)\n      idAttr: DN\n      nameAttr: cn\n      scope: sub\n      username: sAMAccountName\n    groupSearch:\n      baseDN: ${LDAP_SEARCH_GROUPS}\n      filter: (objectClass=group)\n      nameAttr: cn\n      scope: \"\"\n      userMatchers:\n      - groupAttr: member\n        userAttr: DN\n  type: ldap\nEOF\n\ncat <<EOF | kubectl apply -f -\napiVersion: kommander.mesosphere.io\/v1beta1\nkind: VirtualGroup\nmetadata:\n  annotations:\n    kommander.mesosphere.io\/display-name: ntnxlab-ssp-admins\n  name: ntnxlab-ssp-admins\nspec:\n  subjects:\n  - apiGroup: rbac.authorization.k8s.io\n    kind: Group\n    name: \"oidc:SSP Admins\"\n---\napiVersion: kommander.mesosphere.io\/v1beta1\nkind: VirtualGroupClusterRoleBinding\nmetadata:\n  name: ntnxlab-ssp-admins-cluster-federated-admin\nspec:\n  clusterRoleRef:\n    name: kommander-cluster-federated-admin\n  placement:\n    clusterSelector: {}\n  virtualGroupRef:\n    name: ntnxlab-ssp-admins\nEOF","script_type":"sh","command_line_args":"","exit_status":[]},"child_tasks_local_reference_list":[],"variable_list":[],"target_any_local_reference":{"name":"Admin","kind":"app_service"},"timeout_secs":"0","retries":"0","inherit_target":false},{"type":"EXEC","name":"Install NKP license","description":"","attrs":{"type":"","script":"#!\/usr\/bin\/env bash\nset -euo pipefail\nIFS=$'\\n\\t'\n\nsource ~\/.env\n\ncat <<EOF | kubectl apply -f -\napiVersion: v1\nkind: Secret\nmetadata:\n  labels:\n    kommanderType: license\n  name: nutanix-license\n  namespace: kommander\nstringData:\n  nutanix-license-key: @@{NKP_LICENSE_KEY}@@\n---\napiVersion: kommander.mesosphere.io\/v1beta1\nkind: License\nmetadata:\n  name: nutanix-license\n  namespace: kommander\nspec:\n  nutanixLicenseRef:\n    name: nutanix-license\nEOF","script_type":"sh","command_line_args":"","exit_status":[]},"child_tasks_local_reference_list":[],"variable_list":[],"target_any_local_reference":{"name":"Admin","kind":"app_service"},"timeout_secs":"0","retries":"0","inherit_target":false},{"type":"EXEC","name":"Add LB IPs","description":"","attrs":{"type":"","script":"#!\/usr\/bin\/env bash\nset -euo pipefail\nIFS=$'\\n\\t'\n\nsource ~\/.env\n\nkubectl --namespace metallb-system patch ipaddresspool metallb --type='json' -p='[\n  {\n    \"op\": \"add\",\n    \"path\": \"\/spec\/addresses\/-\",\n    \"value\": \"'\"${MGMT_LB_IP_RANGE_USERS_STARTS}-${MGMT_LB_IP_RANGE_USERS_ENDS}\"'\"\n  }\n]'\n\n\n","script_type":"sh","command_line_args":"","exit_status":[]},"child_tasks_local_reference_list":[],"variable_list":[],"target_any_local_reference":{"name":"Admin","kind":"app_service"},"timeout_secs":"0","retries":"0","inherit_target":false},{"type":"EXEC","name":"Enable applications","description":"","attrs":{"type":"","script":"#!\/usr\/bin\/env bash\nset -euo pipefail\n\nsource ~\/.env\n\n# Loop through each app and execute the command\nfor app in $MANAGEMENT_WORKSPACE_APPS; do\n    appdeployment_name=$(echo \"$app\" | cut -d',' -f1)\n    app_name=$(echo \"$app\" | cut -d',' -f2)\n\n    # Execute the command\n    echo \"nkp create appdeployment $appdeployment_name --app $app_name -w kommander-workspace\"\n    nkp create appdeployment \"$appdeployment_name\" --app \"$app_name\" -w kommander-workspace\n    sleep 1\ndone\n\n","script_type":"sh","command_line_args":"","exit_status":[]},"child_tasks_local_reference_list":[],"variable_list":[],"target_any_local_reference":{"name":"Admin","kind":"app_service"},"timeout_secs":"0","retries":"0","inherit_target":false},{"type":"EXEC","name":"Create Files SC","description":"","attrs":{"type":"","script":"source ~\/.env\nkubectl apply -f files_sc.yaml","script_type":"sh","command_line_args":"","exit_status":[]},"child_tasks_local_reference_list":[],"variable_list":[],"target_any_local_reference":{"name":"Admin","kind":"app_service"},"timeout_secs":"0","retries":"0","inherit_target":false}],"main_task_local_reference":{"name":"Admin_ConfigureNkpCluster_dag","kind":"app_task"},"variable_list":[]},"critical":false},{"type":"user","name":"NotUsed_ConfigureDefaultWorkspace","description":"","runbook":{"name":"Admin_ConfigureDefaultWorkspace_runbook","description":"","task_definition_list":[{"type":"DAG","name":"Admin_ConfigureDefaultWorkspace_dag","description":"","attrs":{"type":"","edges":[{"type":"","from_task_reference":{"name":"Enable applications","kind":"app_task"},"to_task_reference":{"name":"Create workload cluster 01","kind":"app_task"},"edge_type":"user_defined"},{"type":"","from_task_reference":{"name":"Enable applications","kind":"app_task"},"to_task_reference":{"name":"Create workload cluster 02","kind":"app_task"},"edge_type":"user_defined"}]},"child_tasks_local_reference_list":[{"name":"Configure Infrastructure provider","kind":"app_task"},{"name":"Enable applications","kind":"app_task"},{"name":"Create workload cluster 01","kind":"app_task"},{"name":"Create workload cluster 02","kind":"app_task"}],"variable_list":[],"target_any_local_reference":{"name":"Admin","kind":"app_service"},"timeout_secs":"0","retries":"0","inherit_target":false},{"type":"EXEC","name":"Configure Infrastructure provider","description":"","attrs":{"type":"","script":"#!\/usr\/bin\/env bash\nset -euo pipefail\nIFS=$'\\n\\t'\n\nsource ~\/.env\n\nkubectl create secret generic $INFRA_PROVIDER_NAME -n kommander-default-workspace \\\n  --from-literal=prismURL=https:\/\/$NUTANIX_ENDPOINT:$NUTANIX_PORT \\\n  --from-literal=username=$NUTANIX_USER \\\n  --from-literal=password=$NUTANIX_PASSWORD \\\n  --from-literal=additionalTrustBundle=\"\" \\\n  --from-literal=insecure=true\nkubectl label secret $INFRA_PROVIDER_NAME -n kommander-default-workspace dkp-infrastructure-provider-type=nutanix-secret","script_type":"sh","command_line_args":"","exit_status":[]},"child_tasks_local_reference_list":[],"variable_list":[],"target_any_local_reference":{"name":"Admin","kind":"app_service"},"timeout_secs":"0","retries":"0","inherit_target":false},{"type":"EXEC","name":"Enable applications","description":"","attrs":{"type":"","script":"#!\/usr\/bin\/env bash\nset -euo pipefail\n\nsource ~\/.env\n\n# Loop through each app and execute the command\nfor app in $DEFAULT_WORKSPACE_APPS; do\n    appdeployment_name=$(echo \"$app\" | cut -d',' -f1)\n    app_name=$(echo \"$app\" | cut -d',' -f2)\n\n    # Execute the command\n    echo \"nkp create appdeployment $appdeployment_name --app $app_name -w default-workspace\"\n    nkp create appdeployment \"$appdeployment_name\" --app \"$app_name\" -w default-workspace\ndone\n","script_type":"sh","command_line_args":"","exit_status":[]},"child_tasks_local_reference_list":[],"variable_list":[],"target_any_local_reference":{"name":"Admin","kind":"app_service"},"timeout_secs":"0","retries":"0","inherit_target":false},{"type":"EXEC","name":"Create workload cluster 01","description":"","attrs":{"type":"","script":"#!\/usr\/bin\/env bash\nset -euo pipefail\nIFS=$'\\n\\t'\n\nsource ~\/.env\n\nnkp create cluster nutanix -c workload01 \\\n-n kommander-default-workspace \\\n--endpoint https:\/\/$NUTANIX_ENDPOINT:$NUTANIX_PORT \\\n--insecure \\\n--control-plane-vcpus 8 \\\n--control-plane-memory 32 \\\n--worker-vcpus 16 \\\n--worker-memory 64 \\\n--control-plane-endpoint-ip $WL01_CONTROL_PLANE_VIP_ADDRESS \\\n--control-plane-prism-element-cluster $NUTANIX_PRISM_ELEMENT_CLUSTER_NAME \\\n--control-plane-subnets $WL01_NUTANIX_SUBNET_NAME \\\n--csi-storage-container $NUTANIX_STORAGE_CONTAINER_NAME \\\n--kubernetes-service-load-balancer-ip-range $WL01_LB_IP_RANGE_STARTS-$WL01_LB_IP_RANGE_ENDS \\\n--worker-prism-element-cluster $NUTANIX_PRISM_ELEMENT_CLUSTER_NAME \\\n--worker-subnets $WL01_NUTANIX_SUBNET_NAME \\\n--registry-mirror-url https:\/\/$REGISTRY_MIRROR_URL \\\n--ssh-public-key-file  ~\/.ssh\/id_rsa.pub \\\n--vm-image $NUTANIX_MACHINE_TEMPLATE_IMAGE_NAME\n\nkubectl -n kommander-default-workspace label cluster workload01 infraId=$INFRA_PROVIDER_NAME\n\nnkp get kubeconfig -c workload01 -n kommander-default-workspace > workload01.conf\n\nkubectl --kubeconfig workload01.conf apply -f files_sc.yaml\n\nkubectl --kubeconfig workload01.conf --namespace metallb-system patch ipaddresspool metallb --type='json' -p='[\n  {\n    \"op\": \"add\",\n    \"path\": \"\/spec\/addresses\/-\",\n    \"value\": \"'\"${WL01_LB_IP_RANGE_USERS_STARTS}-${WL01_LB_IP_RANGE_USERS_ENDS}\"'\"\n  }\n]'","script_type":"sh","command_line_args":"","exit_status":[]},"child_tasks_local_reference_list":[],"variable_list":[],"target_any_local_reference":{"name":"Admin","kind":"app_service"},"timeout_secs":"0","retries":"0","inherit_target":false},{"type":"EXEC","name":"Create workload cluster 02","description":"","attrs":{"type":"","script":"#!\/usr\/bin\/env bash\nset -euo pipefail\nIFS=$'\\n\\t'\n\nsource ~\/.env\n\nsleep 15\n\nnkp create cluster nutanix -c workload02 \\\n-n kommander-default-workspace \\\n--endpoint https:\/\/$NUTANIX_ENDPOINT:$NUTANIX_PORT \\\n--insecure \\\n--control-plane-vcpus 8 \\\n--control-plane-memory 32 \\\n--worker-vcpus 16 \\\n--worker-memory 64 \\\n--control-plane-endpoint-ip $WL02_CONTROL_PLANE_VIP_ADDRESS \\\n--control-plane-prism-element-cluster $NUTANIX_PRISM_ELEMENT_CLUSTER_NAME \\\n--control-plane-subnets $WL02_NUTANIX_SUBNET_NAME \\\n--csi-storage-container $NUTANIX_STORAGE_CONTAINER_NAME \\\n--kubernetes-service-load-balancer-ip-range $WL02_LB_IP_RANGE_STARTS-$WL02_LB_IP_RANGE_ENDS \\\n--worker-prism-element-cluster $NUTANIX_PRISM_ELEMENT_CLUSTER_NAME \\\n--worker-subnets $WL02_NUTANIX_SUBNET_NAME \\\n--registry-mirror-url https:\/\/$REGISTRY_MIRROR_URL \\\n--ssh-public-key-file  ~\/.ssh\/id_rsa.pub \\\n--vm-image $NUTANIX_MACHINE_TEMPLATE_IMAGE_NAME\n\nkubectl -n kommander-default-workspace label cluster workload02 infraId=$INFRA_PROVIDER_NAME\n\nnkp get kubeconfig -c workload02 -n kommander-default-workspace > workload02.conf\n\nkubectl --kubeconfig workload02.conf apply -f files_sc.yaml\n\nkubectl --kubeconfig workload02.conf --namespace metallb-system patch ipaddresspool metallb --type='json' -p='[\n  {\n    \"op\": \"add\",\n    \"path\": \"\/spec\/addresses\/-\",\n    \"value\": \"'\"${WL02_LB_IP_RANGE_USERS_STARTS}-${WL02_LB_IP_RANGE_USERS_ENDS}\"'\"\n  }\n]'","script_type":"sh","command_line_args":"","exit_status":[]},"child_tasks_local_reference_list":[],"variable_list":[],"target_any_local_reference":{"name":"Admin","kind":"app_service"},"timeout_secs":"0","retries":"0","inherit_target":false}],"main_task_local_reference":{"name":"Admin_ConfigureDefaultWorkspace_dag","kind":"app_task"},"variable_list":[]},"critical":false},{"type":"user","name":"GetDashboardAccess","description":"","runbook":{"name":"Admin_GetDashboardAccess_runbook","description":"","task_definition_list":[{"type":"DAG","name":"Admin_GetDashboardAccess_dag","description":"","attrs":{"type":"","edges":[]},"child_tasks_local_reference_list":[{"name":"NKP Dashboard Access","kind":"app_task"}],"variable_list":[],"target_any_local_reference":{"name":"Admin","kind":"app_service"},"timeout_secs":"0","retries":"0","inherit_target":false},{"type":"SET_VARIABLE","name":"NKP Dashboard Access","description":"","attrs":{"type":"","script":"#!\/bin\/bash\n\nset -e\n\nkubectl -n kommander delete appdeployment ai-navigator-app\n\nkubectl patch deployment kommander-kommander-ui \\\n  -n kommander \\\n  --type='json' \\\n  -p='[{\"op\": \"replace\", \"path\": \"\/spec\/template\/spec\/containers\/0\/resources\/limits\/cpu\", \"value\": \"4\"},\n       {\"op\": \"replace\", \"path\": \"\/spec\/template\/spec\/containers\/0\/resources\/limits\/memory\", \"value\": \"4Gi\"}]'\n\nNKP_DASHBOARD_URL=$(kubectl -n kommander get svc kommander-traefik -o go-template='https:\/\/{{with index .status.loadBalancer.ingress 0}}{{or .hostname .ip}}{{end}}\/dkp\/kommander\/dashboard{{ \"\\n\"}}')\nNKP_DASHBOARD_USERNAME=$(kubectl -n kommander get secret dkp-credentials -o go-template='{{.data.username|base64decode}}')\nNKP_DASHBOARD_PASSWORD=$(kubectl -n kommander get secret dkp-credentials -o go-template='{{.data.password|base64decode}}')\n\ncat <<EOF >>~\/.env\nexport NKP_DASHBOARD_URL=${NKP_DASHBOARD_URL}\nexport NKP_DASHBOARD_USERNAME=${NKP_DASHBOARD_USERNAME}\nexport NKP_DASHBOARD_PASSWORD=${NKP_DASHBOARD_PASSWORD}\nEOF\n\necho \"NKP_DASHBOARD_URL=${NKP_DASHBOARD_URL}\"\necho \"NKP_DASHBOARD_USERNAME=${NKP_DASHBOARD_USERNAME}\"\necho \"NKP_DASHBOARD_PASSWORD=${NKP_DASHBOARD_PASSWORD}\"","script_type":"sh","exit_status":[],"eval_scope":"local","eval_variables":["NKP_DASHBOARD_URL","NKP_DASHBOARD_USERNAME","NKP_DASHBOARD_PASSWORD"]},"child_tasks_local_reference_list":[],"variable_list":[],"target_any_local_reference":{"name":"Admin","kind":"app_service"},"timeout_secs":"0","retries":"0","inherit_target":false}],"main_task_local_reference":{"name":"Admin_GetDashboardAccess_dag","kind":"app_task"},"variable_list":[]},"critical":false},{"type":"user","name":"PackageInstall","description":"","runbook":{"name":"Admin_PackageInstall_runbook","description":"","task_definition_list":[{"type":"DAG","name":"Admin_PackageInstall_dag","description":"","attrs":{"type":"","edges":[{"type":"","from_task_reference":{"name":"Install NKP dependencies","kind":"app_task"},"to_task_reference":{"name":"Configure Files for StorageClass","kind":"app_task"},"edge_type":"user_defined"},{"type":"","from_task_reference":{"name":"Configure Files for StorageClass","kind":"app_task"},"to_task_reference":{"name":"Install NKP management cluster","kind":"app_task"},"edge_type":"user_defined"},{"type":"","from_task_reference":{"name":"Install NKP management cluster","kind":"app_task"},"to_task_reference":{"name":"Configure NKP cluster","kind":"app_task"},"edge_type":"user_defined"},{"type":"","from_task_reference":{"name":"Configure NKP cluster","kind":"app_task"},"to_task_reference":{"name":"InstallNAI","kind":"app_task"},"edge_type":"user_defined"},{"type":"","from_task_reference":{"name":"Configure NKP cluster","kind":"app_task"},"to_task_reference":{"name":"NKP dashboard access details","kind":"app_task"},"edge_type":"user_defined"},{"type":"","from_task_reference":{"name":"InstallNAI","kind":"app_task"},"to_task_reference":{"name":"InstallAISoftware","kind":"app_task"},"edge_type":"user_defined"}]},"child_tasks_local_reference_list":[{"name":"Install NKP dependencies","kind":"app_task"},{"name":"Install Tools","kind":"app_task"},{"name":"Configure Files for StorageClass","kind":"app_task"},{"name":"Install NKP management cluster","kind":"app_task"},{"name":"Configure NKP cluster","kind":"app_task"},{"name":"InstallNAI","kind":"app_task"},{"name":"NKP dashboard access details","kind":"app_task"},{"name":"InstallAISoftware","kind":"app_task"}],"variable_list":[],"target_any_local_reference":{"name":"Admin","kind":"app_service"},"timeout_secs":"0","retries":"0","inherit_target":false},{"type":"CALL_RUNBOOK","name":"Install NKP dependencies","description":"","attrs":{"type":"","runbook_reference":{"name":"Admin_InstallDeps_runbook","kind":"app_runbook"},"inarg_list":[]},"child_tasks_local_reference_list":[],"variable_list":[],"target_any_local_reference":{"name":"Admin","kind":"app_service"},"timeout_secs":"0","retries":"0","inherit_target":false},{"type":"CALL_RUNBOOK","name":"Install Tools","description":"","attrs":{"type":"CALL_RUNBOOK","runbook_reference":{"name":"1f200b8c_runbook","kind":"app_runbook"},"inarg_list":[]},"child_tasks_local_reference_list":[],"variable_list":[],"target_any_local_reference":{"name":"Admin","kind":"app_service"},"timeout_secs":"0","retries":"0","inherit_target":false},{"type":"CALL_RUNBOOK","name":"Configure Files for StorageClass","description":"","attrs":{"type":"","runbook_reference":{"name":"Admin_ConfigureFiles_runbook","kind":"app_runbook"},"inarg_list":[]},"child_tasks_local_reference_list":[],"variable_list":[],"target_any_local_reference":{"name":"Admin","kind":"app_service"},"timeout_secs":"0","retries":"0","inherit_target":false},{"type":"CALL_RUNBOOK","name":"Install NKP management cluster","description":"","attrs":{"type":"","runbook_reference":{"name":"Admin_InstallNkpCluster_runbook","kind":"app_runbook"},"inarg_list":[]},"child_tasks_local_reference_list":[],"variable_list":[],"target_any_local_reference":{"name":"Admin","kind":"app_service"},"timeout_secs":"0","retries":"0","inherit_target":false},{"type":"CALL_RUNBOOK","name":"Configure NKP cluster","description":"","attrs":{"type":"","runbook_reference":{"name":"Admin_ConfigureNkpCluster_runbook","kind":"app_runbook"},"inarg_list":[]},"child_tasks_local_reference_list":[],"variable_list":[],"target_any_local_reference":{"name":"Admin","kind":"app_service"},"timeout_secs":"0","retries":"0","inherit_target":false},{"type":"CALL_RUNBOOK","name":"InstallNAI","description":"","attrs":{"type":"CALL_RUNBOOK","runbook_reference":{"name":"3b3d6a94_runbook","kind":"app_runbook"},"inarg_list":[]},"child_tasks_local_reference_list":[],"variable_list":[],"target_any_local_reference":{"name":"Admin","kind":"app_service"},"timeout_secs":"0","retries":"0","inherit_target":false},{"type":"CALL_RUNBOOK","name":"NKP dashboard access details","description":"","attrs":{"type":"","runbook_reference":{"name":"Admin_GetDashboardAccess_runbook","kind":"app_runbook"},"inarg_list":[]},"child_tasks_local_reference_list":[],"variable_list":[],"target_any_local_reference":{"name":"Admin","kind":"app_service"},"timeout_secs":"0","retries":"0","inherit_target":false},{"type":"CALL_RUNBOOK","name":"InstallAISoftware","description":"","attrs":{"type":"CALL_RUNBOOK","runbook_reference":{"name":"36358e51_runbook","kind":"app_runbook"},"inarg_list":[]},"child_tasks_local_reference_list":[],"variable_list":[],"target_any_local_reference":{"name":"Admin","kind":"app_service"},"timeout_secs":"0","retries":"0","inherit_target":false}],"main_task_local_reference":{"name":"Admin_PackageInstall_dag","kind":"app_task"},"variable_list":[]},"critical":false},{"type":"user","name":"NkpDeleteClusters","description":"","runbook":{"name":"Admin_NkpDeleteClusters_runbook","description":"","task_definition_list":[{"type":"DAG","name":"Admin_NkpDeleteClusters_dag","description":"","attrs":{"type":"","edges":[]},"child_tasks_local_reference_list":[{"name":"Delete management cluster","kind":"app_task"}],"variable_list":[],"target_any_local_reference":{"name":"Admin","kind":"app_service"},"timeout_secs":"0","retries":"0","inherit_target":false},{"type":"EXEC","name":"Delete management cluster","description":"","attrs":{"type":"","script":"#!\/usr\/bin\/env bash\nset -euo pipefail\nIFS=$'\\n\\t'\n\nsource ~\/.env\n\nnkp delete cluster -c $CLUSTER_NAME --self-managed","script_type":"sh","command_line_args":"","exit_status":[]},"child_tasks_local_reference_list":[],"variable_list":[],"target_any_local_reference":{"name":"Admin","kind":"app_service"},"timeout_secs":"0","retries":"0","inherit_target":false}],"main_task_local_reference":{"name":"Admin_NkpDeleteClusters_dag","kind":"app_task"},"variable_list":[]},"critical":false},{"type":"user","name":"InstallNAI","description":"","runbook":{"name":"3b3d6a94_runbook","description":"","task_definition_list":[{"type":"DAG","name":"5aa2e727_dag","description":"","attrs":{"type":"","edges":[{"type":"","from_task_reference":{"name":"InstallKserve","kind":"app_task"},"to_task_reference":{"name":"InstallNAI","kind":"app_task"},"edge_type":"user_defined"},{"type":"","from_task_reference":{"name":"InstallNAI","kind":"app_task"},"to_task_reference":{"name":"PostInstall","kind":"app_task"},"edge_type":"user_defined"},{"type":"","from_task_reference":{"name":"PostInstall","kind":"app_task"},"to_task_reference":{"name":"ConfigureNAI","kind":"app_task"},"edge_type":"user_defined"}]},"child_tasks_local_reference_list":[{"name":"InstallKserve","kind":"app_task"},{"name":"InstallNAI","kind":"app_task"},{"name":"PostInstall","kind":"app_task"},{"name":"ConfigureNAI","kind":"app_task"}],"variable_list":[],"timeout_secs":"0","retries":"0","inherit_target":false},{"type":"EXEC","name":"InstallKserve","description":"","attrs":{"type":"","script":"source ~\/.env\n\nexport KSERVE_VERSION=v0.14.0\n\n# Wait for istio and knative to be up\necho \"Checking for Istio\"\nuntil kubectl wait --for condition=ready pods -l app=istio-ingressgateway -n istio-system; do sleep 2; done\necho \"Checking for Knative\"\nuntil kubectl wait --for condition=ready pods -l app.kubernetes.io\/name=knative-serving -n knative-serving; do sleep 2; done\n\nhelm upgrade --install kserve-crd oci:\/\/ghcr.io\/kserve\/charts\/kserve-crd --version=$KSERVE_VERSION -n kserve --create-namespace --wait\n\nhelm upgrade --install kserve oci:\/\/ghcr.io\/kserve\/charts\/kserve --version=$KSERVE_VERSION -n kserve --wait \\\n--set kserve.modelmesh.enabled=false --set kserve.controller.image=docker.io\/nutanix\/nai-kserve-controller \\\n--set kserve.controller.tag=$KSERVE_VERSION","script_type":"sh","command_line_args":"","exit_status":[]},"child_tasks_local_reference_list":[],"variable_list":[],"target_any_local_reference":{"name":"Admin","kind":"app_service"},"timeout_secs":"0","retries":"0","inherit_target":false},{"type":"EXEC","name":"InstallNAI","description":"","attrs":{"type":"","script":"source ~\/.env\n\nhelm repo add ntnx-charts https:\/\/nutanix.github.io\/helm-releases\nhelm repo update ntnx-charts\nhelm pull ntnx-charts\/nai-core --version=$NAI_CORE_VERSION --untar=true\n\n# Make sure KServe is running\necho \"Checking for Kserve\"\nuntil kubectl wait --for condition=ready pods -l app.kubernetes.io\/name=kserve-controller-manager -n kserve; do sleep 2; done\n\n#NAI-core\nhelm upgrade --install nai-core ntnx-charts\/nai-core --version=$NAI_CORE_VERSION -n nai-system --create-namespace --wait \\\n--set imagePullSecret.credentials.username=$DOCKER_USERNAME \\\n--set imagePullSecret.credentials.email=$DOCKER_EMAIL \\\n--set imagePullSecret.credentials.password=$DOCKER_PASSWORD \\\n--set naiApi.storageClassName=nutanix-files \\\n--set defaultStorageClassName=nutanix-volume \\\n--insecure-skip-tls-verify \\\n-f .\/nai-core\/values.yaml","script_type":"sh","command_line_args":"","exit_status":[]},"child_tasks_local_reference_list":[],"variable_list":[],"target_any_local_reference":{"name":"Admin","kind":"app_service"},"timeout_secs":"0","retries":"0","inherit_target":false},{"type":"SET_VARIABLE","name":"PostInstall","description":"","attrs":{"type":"","script":"source ~\/.env\n\nINGRESS_HOST=$(kubectl get svc -n istio-system istio-ingressgateway -o jsonpath='{.status.loadBalancer.ingress[0].ip}')\nNAI_UI_ENDPOINT=\"https:\/\/${INGRESS_HOST\/\/.\/-}.sslip.nutanixdemo.com\"\necho \"Creating secret iep-cert for certificate\"\n# Create secret for certificates\n\n# get certs\nmkdir -p $HOME\/certs\nwget -O $HOME\/certs\/fullchain1.pem http:\/\/10.55.251.38\/workshop_staging\/tradeshows\/configuration\/certificates\/sslip.nutanixdemo.com\/fullchain1.pem \nwget -O $HOME\/certs\/privkey1.pem http:\/\/10.55.251.38\/workshop_staging\/tradeshows\/configuration\/certificates\/sslip.nutanixdemo.com\/privkey1.pem\n\nCERT_PATH=\"$HOME\/certs\/fullchain1.pem\"\nKEY_PATH=\"$HOME\/certs\/privkey1.pem\"\nCERT_NAME=\"nai-cert\"\nkubectl create secret tls -n istio-system $CERT_NAME --cert=$CERT_PATH --key=$KEY_PATH\n\nkubectl patch configmap config-features -n knative-serving --patch '{\"data\":{\"kubernetes.podspec-nodeselector\":\"enabled\"},\"metadata\":{\"annotations\":{\"kustomize.toolkit.fluxcd.io\/reconcile\":\"disabled\"}}}'\nkubectl patch configmap config-features -n knative-serving --patch '{\"data\":{\"kubernetes.podspec-tolerations\":\"enabled\"}}'\nkubectl patch configmap config-autoscaler -n knative-serving --patch '{\"data\":{\"enable-scale-to-zero\":\"false\"},\"metadata\":{\"annotations\":{\"kustomize.toolkit.fluxcd.io\/reconcile\":\"disabled\"}}}'\n\nkubectl patch gateways.networking.istio.io knative-ingress-gateway -n knative-serving --type merge --patch-file=\/dev\/stdin <<EOF\nspec:\n  servers:\n  - hosts:\n    - '*'\n    port:\n      name: http\n      number: 80\n      protocol: HTTP\n    tls:\n      httpsRedirect: true\n  - hosts:\n    - '*'\n    port:\n      name: https\n      number: 443\n      protocol: HTTPS\n    tls:\n      mode: SIMPLE\n      credentialName: ${CERT_NAME}\nEOF\n\necho \"NAI_UI_ENDPOINT=$NAI_UI_ENDPOINT\"","script_type":"sh","exit_status":[],"eval_scope":"local","eval_variables":["NAI_UI_ENDPOINT"]},"child_tasks_local_reference_list":[],"variable_list":[],"target_any_local_reference":{"name":"Admin","kind":"app_service"},"timeout_secs":"0","retries":"0","inherit_target":false},{"type":"EXEC","name":"ConfigureNAI","description":"","attrs":{"type":"","script":"#!\/bin\/bash\nexport NAI_DEFAULT_PW=\"@@{NAI_DEFAULT_PW}@@\"\nexport NEW_PASSWORD=\"@@{NAI_NEW_PW}@@\"\nexport HF_TOKEN=\"@@{HF_TOKEN}@@\"\nexport NAI_UI_ENDPOINT=\"@@{NAI_UI_ENDPOINT}@@\"\nexport CURL_OPTS=\"-sk\"\n\nUSERS=()\n\n# Create adminuser01-05\nfor i in {1..5}\ndo\n  USERS+=(\"adminuser$(printf \"%02d\" $i)\")\ndone\n\n# Initial login to set token\necho -e \"Initial login with default password to set JWT token\"\nPAYLOAD=$(cat <<EOF\n{\"username\":\"admin\",\"password\":\"$NAI_DEFAULT_PW\"}\nEOF\n)\nJWT_TOKEN=$(curl \"$CURL_OPTS\" -X POST \"$NAI_UI_ENDPOINT\/api\/v1\/login\/local\" -H 'Content-Type: application\/json' -d $PAYLOAD | jq -r .data.AccessToken)\n\nsleep 1\n\n# Reset password\necho -e \"Resetting password\"\nPAYLOAD=$(cat <<EOF\n{\"currentPassword\":\"$NAI_DEFAULT_PW\",\"newPassword\":\"$NEW_PASSWORD\",\"username\":\"admin\"}\nEOF\n)\ncurl $CURL_OPTS -X PATCH \"$NAI_UI_ENDPOINT\/api\/v1\/users\/reset_password\" -H 'Content-Type: application\/json'  -H \"Authorization: $JWT_TOKEN\" -d $PAYLOAD\n\nsleep 1\n\n# Accept EULA\necho -e \"\\nAccepting EULA\"\nPAYLOAD=$(cat <<EOF\n{\"eula\":{\"accepted\":true,\"name\":\"admin\",\"company\":\"Nutanix\"}}\nEOF\n) \ncurl $CURL_OPTS -X PATCH \"$NAI_UI_ENDPOINT\/api\/v1\/cluster\/config\" -H 'Content-Type: application\/json'  -H \"Authorization: $JWT_TOKEN\" -d $PAYLOAD\n\nsleep 1\n\n# Enable Pulse\necho -e \"\\nEnabling Pulse\"\nPAYLOAD=$(cat <<EOF\n{\"pulse\":{\"accepted\":true}}\nEOF\n) \ncurl $CURL_OPTS -X PATCH \"$NAI_UI_ENDPOINT\/api\/v1\/cluster\/config\" -H 'Content-Type: application\/json'  -H \"Authorization: $JWT_TOKEN\" -d $PAYLOAD\n\nsleep 1\n\n# Create HF Token\necho -e \"\\nCreating HF Token\"\nPAYLOAD=$(cat <<EOF\n{\"name\":\"hf_token\",\"data\":{\"HF_TOKEN\":\"$HF_TOKEN\"},\"type\":\"hf\"}\nEOF\n)\ncurl $CURL_OPTS -X POST \"$NAI_UI_ENDPOINT\/api\/v1\/credentials\" -H 'Content-Type: application\/json'  -H \"Authorization: $JWT_TOKEN\" -d $PAYLOAD\n\nsleep 1\n\necho -e \"\\nCreating users\"\n# Create 5 users\nfor USER_NAI_NAME in \"${USERS[@]}\"\ndo\nPAYLOAD=$(cat <<EOF\n{\"email\":\"$USER_NAI_NAME@ntnxlab.local\",\"password\":\"$NAI_USER_PW\",\"firstName\":\"Bootcamp\",\"lastName\":\"User$(cat \/dev\/urandom | LC_ALL=C tr -dc 'A-Za-z' | head -c 5)\",\"username\":\"$USER_NAI_NAME\",\"role\":\"MLUser\"}\nEOF\n)\necho -e \"\\nCreating user $USER_NAI_NAME\"\ncurl $CURL_OPTS -X POST \"$NAI_UI_ENDPOINT\/api\/v1\/users\" -H 'Content-Type: application\/json' -H \"Authorization: $JWT_TOKEN\" -d $PAYLOAD\nsleep 1\ndone","script_type":"sh","command_line_args":"","exit_status":[]},"child_tasks_local_reference_list":[],"variable_list":[],"target_any_local_reference":{"name":"Admin","kind":"app_service"},"timeout_secs":"0","retries":"0","inherit_target":false}],"main_task_local_reference":{"name":"5aa2e727_dag","kind":"app_task"},"variable_list":[]},"critical":false},{"type":"user","name":"InstallTools","description":"","runbook":{"name":"1f200b8c_runbook","description":"","task_definition_list":[{"type":"DAG","name":"b99b3b4e_dag","description":"","attrs":{"type":"","edges":[]},"child_tasks_local_reference_list":[{"name":"SetupTools","kind":"app_task"}],"variable_list":[],"timeout_secs":"0","retries":"0","inherit_target":false},{"type":"EXEC","name":"SetupTools","description":"","attrs":{"type":"","script":"# Courtesy of https:\/\/github.com\/jesse-gonzalez\n\n## install arkade to simplify installing cloud-native tools\ncurl -sLS https:\/\/get.arkade.dev| sudo sh\n\n## install utils\narkade get \\\nkubectx \\\nkubens \\\nkrew \\\nstern\n\n## install yq\nsudo wget https:\/\/github.com\/mikefarah\/yq\/releases\/latest\/download\/yq_linux_amd64 -O \/usr\/bin\/yq\nsudo chmod +x \/usr\/bin\/yq\n\n## install k9s\ncurl -sS https:\/\/webinstall.dev\/k9s | bash\n\n## set path for arkade and krew kubectl plugin binaries\nexport PATH=\"$HOME\/.arkade\/bin\/:$HOME\/.krew\/bin:$PATH\"\n\necho \"alias k=$(which kubectl)\" >> $HOME\/.bashrc\necho \"alias kns=$(which kubens)\" >> $HOME\/.bashrc","script_type":"sh","command_line_args":"","exit_status":[]},"child_tasks_local_reference_list":[],"variable_list":[],"target_any_local_reference":{"name":"Admin","kind":"app_service"},"timeout_secs":"0","retries":"0","inherit_target":false}],"main_task_local_reference":{"name":"b99b3b4e_dag","kind":"app_task"},"variable_list":[]},"critical":false},{"type":"user","name":"InstallAISoftware","description":"","runbook":{"name":"36358e51_runbook","description":"","task_definition_list":[{"type":"DAG","name":"ed89e085_dag","description":"","attrs":{"type":"","edges":[{"type":"","from_task_reference":{"name":"Install Ingress","kind":"app_task"},"to_task_reference":{"name":"Install Flowise","kind":"app_task"},"edge_type":"user_defined"},{"type":"","from_task_reference":{"name":"Install Flowise","kind":"app_task"},"to_task_reference":{"name":"Install Langfuse","kind":"app_task"},"edge_type":"user_defined"}]},"child_tasks_local_reference_list":[{"name":"Install Ingress","kind":"app_task"},{"name":"Install Flowise","kind":"app_task"},{"name":"Install Langfuse","kind":"app_task"}],"variable_list":[],"timeout_secs":"0","retries":"0","inherit_target":false},{"type":"EXEC","name":"Install Ingress","description":"","attrs":{"type":"","script":"# Install ingress-nginx\nhelm repo add ingress-nginx https:\/\/kubernetes.github.io\/ingress-nginx\nhelm upgrade --install ingress-nginx ingress-nginx\/ingress-nginx \\\n  --namespace ingress-nginx \\\n  --create-namespace \\\n  --set controller.replicaCount=2 \\\n  --set controller.allowSnippetAnnotations=true \\\n  --set controller.ingressClassResource.default=true \\\n  --set force-ssl-redirect=true \\\n  --version=4.8.3\n  --wait\nkubectl --namespace ingress-nginx get services -o wide ingress-nginx-controller","script_type":"sh","command_line_args":"","exit_status":[]},"child_tasks_local_reference_list":[],"variable_list":[],"target_any_local_reference":{"name":"Admin","kind":"app_service"},"timeout_secs":"0","retries":"0","inherit_target":false},{"type":"EXEC","name":"Install Flowise","description":"","attrs":{"type":"","script":"# TODO: make sure ingress is up\n\n# Make sure the istio-system namespace is up\nuntil kubectl get namespace istio-system &>\/dev\/null; do echo \"Waiting for namespace istio-system\";  sleep 2; done\n\n# INSTANCE=flowise-user#\nfor i in {1..5}\ndo\n  export INSTANCE=\"flowise-user$i\"\n  export INGRESS_IP=$(kubectl get svc ingress-nginx-controller -n ingress-nginx -o jsonpath=\"{.status.loadBalancer.ingress[].ip}\" && echo)\n  export SSLIP_HOSTNAME=\"${INSTANCE}-${INGRESS_IP\/\/.\/-}.sslip.nutanixdemo.com\"\n\n  kubectl create namespace ${INSTANCE} --dry-run=client -o yaml | kubectl apply -f -\n\n  # use the existing certificate\n  kubectl get secret -n istio-system nai-cert -o yaml | sed \"s\/namespace: istio-system\/namespace: ${INSTANCE}\/g\" | kubectl apply -f -\n  kubectl get secret nai-cert -n ${INSTANCE}\n\n  # install flowise\n  helm repo add cowboysysop https:\/\/cowboysysop.github.io\/charts\/\n  helm repo update cowboysysop\n\n  time helm upgrade --install flowise cowboysysop\/flowise --version 3.11.3 \\\n    --namespace ${INSTANCE} \\\n    --set image.tag=\"2.2.7\" \\\n    --set ingress.enabled=true \\\n    --set ingress.ingressClassName=\"nginx\" \\\n    --set ingress.hosts[0].host=\"${SSLIP_HOSTNAME}\" \\\n    --set ingress.hosts[0].paths[0]=\"\/\" \\\n    --set ingress.tls[0].secretName=\"iep-cert\" \\\n    --set ingress.tls[0].hosts[0]=\"${SSLIP_HOSTNAME}\" \\\n    --wait\n done","script_type":"sh","command_line_args":"","exit_status":[]},"child_tasks_local_reference_list":[],"variable_list":[],"target_any_local_reference":{"name":"Admin","kind":"app_service"},"timeout_secs":"0","retries":"0","inherit_target":false},{"type":"EXEC","name":"Install Langfuse","description":"","attrs":{"type":"","script":"wget http:\/\/10.55.251.38\/workshop_staging\/tradeshows\/software\/langfuse\/langfuse-values.yaml\n\n# TODO: make sure ingress is up\n\nexport INSTANCE=\"langfuse\"\nexport INGRESS_IP=$(kubectl get svc ingress-nginx-controller -n ingress-nginx -o jsonpath=\"{.status.loadBalancer.ingress[].ip}\" && echo)\nexport SSLIP_HOSTNAME=\"${INSTANCE}-${INGRESS_IP\/\/.\/-}.sslip.nutanixdemo.com\"\n\nkubectl create namespace ${INSTANCE} --dry-run=client -o yaml | kubectl apply -f -\n\n# use the existing certificate\nkubectl get secret -n istio-system nai-cert -o yaml | sed \"s\/namespace: istio-system\/namespace: ${INSTANCE}\/g\" | kubectl apply -f -\nkubectl get secret nai-cert -n ${INSTANCE}\n\n# install langfuse\nhelm repo add langfuse https:\/\/langfuse.github.io\/langfuse-k8s\nhelm repo update\n\nyq -e -i \".langfuse.ingress.hosts[0].host = strenv(SSLIP_HOSTNAME)\" langfuse-values.yaml\nyq -e -i \".langfuse.ingress.tls.hosts[0] = strenv(SSLIP_HOSTNAME)\" langfuse-values.yaml\n\ntime helm upgrade --install langfuse langfuse\/langfuse -f langfuse-values.yaml \\\n  --namespace ${INSTANCE} \\\n  --wait","script_type":"sh","command_line_args":"","exit_status":[]},"child_tasks_local_reference_list":[],"variable_list":[],"target_any_local_reference":{"name":"Admin","kind":"app_service"},"timeout_secs":"0","retries":"0","inherit_target":false}],"main_task_local_reference":{"name":"ed89e085_dag","kind":"app_task"},"variable_list":[]},"critical":false}],"depends_on_list":[],"port_list":[],"singleton":false,"tier":""}],"published_service_definition_list":[],"substrate_definition_list":[{"type":"AHV_VM","name":"Admin_Substrate","description":"\n    Admin AHV Spec\n    Default 4 CPU & 16 GB of memory\n    ","variable_list":[],"action_list":[],"create_spec":{"type":"","name":"@@{calm_application_name}@@-boot","availability_zone_reference":null,"backup_policy":null,"cluster_reference":{"type":"","kind":"cluster","name":"PHX-POC256","uuid":"000631a4-7cc0-1ca5-4b8e-ac1f6b3f91cd"},"resources":{"type":"","nic_list":[{"type":"","nic_type":"NORMAL_NIC","subnet_reference":{"type":"","kind":"subnet","name":"primary","uuid":"dadd7530-e37b-48eb-9876-2e05e802f84e"},"network_function_nic_type":"INGRESS","mac_address":"","ip_endpoint_list":[],"network_function_chain_reference":null,"vpc_reference":null}],"power_state":"ON","guest_tools":null,"num_vcpus_per_socket":1,"num_sockets":4,"memory_size_mib":8192,"gpu_list":[],"parent_reference":null,"hardware_clock_timezone":"","account_uuid":"89274fa0-6737-4cb4-8329-a3d561e3ec7c","guest_customization":{"type":"","cloud_init":{"type":"","meta_data":"","user_data":"#cloud-config\nhostname: @@{name}@@\nfqdn: \"@@{name}@@.@@{DOMAIN}@@\"\nprefer_fqdn_over_hostname: true\nmanage_etc_hosts: true\nssh_pwauth: true\nchpasswd:\n  expire: false\n  users:\n    - name: @@{CRED_SSH.username}@@\n      password: @@{SSH_PASSWORD}@@\n      type: text\nusers:\n- name: @@{CRED_SSH.username}@@\n  shell: \/bin\/bash\n  ssh_authorized_keys:\n  - @@{CRED_SSH.public_key}@@\n  sudo: ALL=(ALL) NOPASSWD:ALL\nruncmd:\n- '[ ! -f \"\/etc\/yum.repos.d\/nutanix_rocky9.repo\" ] || mv -f \/etc\/yum.repos.d\/nutanix_rocky9.repo \/etc\/yum.repos.d\/nutanix_rocky9.repo.disabled'\n- dnf config-manager --add-repo https:\/\/download.docker.com\/linux\/rhel\/docker-ce.repo\n- dnf -y install docker-ce docker-ce-cli containerd.io\n- systemctl --now enable docker\n- usermod -aG docker nutanix\n- 'curl -Lo \/usr\/local\/bin\/kubectl https:\/\/storage.googleapis.com\/kubernetes-release\/release\/$(curl -s https:\/\/storage.googleapis.com\/kubernetes-release\/release\/stable.txt)\/bin\/linux\/amd64\/kubectl'\n- chmod +x \/usr\/local\/bin\/kubectl\n- 'curl https:\/\/raw.githubusercontent.com\/helm\/helm\/main\/scripts\/get-helm-3 | bash'\n- 'su - nutanix -c \"curl -fsSL http:\/\/10.42.194.11\/workshop_staging\/tradeshows\/experimental\/nkp-bootcamp\/install-tools.sh | bash\"'\n- eject"},"sysprep":null},"boot_config":{"type":"","boot_device":{"type":"","disk_address":{"type":"","device_index":0,"adapter_type":"SCSI"}},"mac_address":"","boot_type":""},"disk_list":[{"type":"","data_source_reference":{"type":"","kind":"image","name":"nkp-rocky-9.5-release-1.31.4-20250214003015.qcow2","uuid":"9e58b563-8c08-4457-ac96-532f0656f09d"},"volume_group_reference":null,"device_properties":{"type":"","disk_address":{"type":"","device_index":0,"adapter_type":"SCSI"},"device_type":"DISK"},"disk_size_mib":20480}],"serial_port_list":[]},"categories":{}},"os_type":"Linux","readiness_probe":{"login_credential_local_reference":{"name":"CRED_SSH","kind":"app_credential"},"connection_type":"SSH","connection_port":22,"delay_secs":"60","retries":"5","address":"@@{platform.status.resources.nic_list[0].ip_endpoint_list[0].ip}@@","disable_readiness_probe":false,"connection_protocol":""}}],"package_definition_list":[{"type":"CUSTOM","name":"Admin_Package","description":"\n    Package install for Admin\n    ","variable_list":[],"action_list":[],"service_local_reference_list":[{"name":"Admin","kind":"app_service"}],"version":"","options":{"type":"","install_runbook":{"name":"Admin_Package___install___runbook","description":"","task_definition_list":[{"type":"DAG","name":"Admin_Package___install___dag","description":"","attrs":{"type":"","edges":[]},"child_tasks_local_reference_list":[{"name":"Package Install","kind":"app_task"}],"variable_list":[],"target_any_local_reference":{"name":"Admin","kind":"app_service"},"timeout_secs":"0","retries":"0","inherit_target":false},{"type":"CALL_RUNBOOK","name":"Package Install","description":"","attrs":{"type":"","runbook_reference":{"name":"Admin_PackageInstall_runbook","kind":"app_runbook"},"inarg_list":[]},"child_tasks_local_reference_list":[],"variable_list":[],"target_any_local_reference":{"name":"Admin","kind":"app_service"},"timeout_secs":"0","retries":"0","inherit_target":false}],"main_task_local_reference":{"name":"Admin_Package___install___dag","kind":"app_task"},"variable_list":[]},"uninstall_runbook":{"name":"Runbook_for_Package_Admin_Package_action_uninstall","description":"","task_definition_list":[{"type":"DAG","name":"DAG_Task_for_Package_Admin_Package_action_uninstall","description":"","attrs":{"type":"","edges":[]},"child_tasks_local_reference_list":[],"variable_list":[],"target_any_local_reference":{"name":"Admin","kind":"app_service"},"timeout_secs":"0","retries":"0","inherit_target":false}],"main_task_local_reference":{"name":"DAG_Task_for_Package_Admin_Package_action_uninstall","kind":"app_task"},"variable_list":[]},"upgrade_runbook":{}}},{"type":"SUBSTRATE_IMAGE","name":"NKP_213_ROCKY_95","description":"","variable_list":[],"action_list":[],"service_local_reference_list":[],"version":"","options":{"type":"","name":"nkp-rocky-9.5-release-1.30.5-20241125163629.qcow2","resources":{"type":"","image_type":"DISK_IMAGE","checksum":{"type":"","checksum_algorithm":"","checksum_value":""},"source_uri":"http:\/\/10.42.194.11\/workshop_staging\/tradeshows\/os_builds\/kubernetes\/nkp\/nkp-rocky-9.5-release-1.30.5-20241125163629.qcow2","version":{"type":"","product_version":"1.0","product_name":"NKP_213_ROCKY_95"},"architecture":"X86_64"},"description":""}}],"app_profile_list":[{"name":"Nutanix","description":"","variable_list":[{"type":"LOCAL","name":"MANAGEMENT_WORKSPACE_APPS","description":"This need to be updated with every new release. Command to list apps is kubectl get clusterapps. The format of the list is to use comma to separate appdeployment and app name, and the space to separate different apps","is_hidden":true,"is_mandatory":false,"data_type":"BASE","val_type":"STRING","label":"Apps to additionally enable in the Management Workspace","attrs":{"type":""},"value":"nkp-insights,nkp-insights-1.4.4 istio,istio-1.23.3 knative,knative-1.17.0"},{"type":"LOCAL","name":"DEFAULT_WORKSPACE_APPS","description":"This need to be updated with every new release. Command to list apps is kubectl get clusterapps. The format of the list is to use comma to separate appdeployment and app name, and the space to separate different apps","is_hidden":true,"is_mandatory":false,"data_type":"BASE","val_type":"STRING","label":"Apps to enable by default in Default Workspace","attrs":{"type":""},"value":"grafana-logging,grafana-logging-8.9.0 grafana-loki,grafana-loki-0.79.5 kube-prometheus-stack,kube-prometheus-stack-69.1.2 kubecost,kubecost-2.5.2 kubernetes-dashboard,kubernetes-dashboard-7.10.3 logging-operator,logging-operator-5.0.1 nkp-insights-management,nkp-insights-management-1.4.4 prometheus-adapter,prometheus-adapter-4.11.0 rook-ceph,rook-ceph-1.16.2 rook-ceph-cluster,rook-ceph-cluster-1.16.2"},{"type":"LOCAL","name":"CSI_FILE_SERVER_NAME","description":"","is_hidden":true,"is_mandatory":false,"data_type":"BASE","val_type":"STRING","label":"Files instance name for CSI","attrs":{"type":""},"value":"dummy"},{"type":"LOCAL","name":"CSI_FILE_SERVER_ENABLE","description":"","options":{"type":"PREDEFINED","choices":["false","true"]},"is_hidden":true,"is_mandatory":false,"data_type":"BASE","val_type":"STRING","label":"Enable Files CSI","attrs":{"type":""},"value":"false"},{"type":"LOCAL","name":"STORAGE_CONTAINER_NAME","description":"","is_hidden":true,"is_mandatory":false,"data_type":"BASE","val_type":"STRING","label":"PE storage container for CSI Volumes","attrs":{"type":""},"value":"SelfServiceContainer"},{"type":"LOCAL","name":"CONTAINER_REGISTRY_MIRROR","description":"","is_hidden":true,"is_mandatory":false,"data_type":"BASE","val_type":"STRING","label":"Registry mirror","attrs":{"type":""},"value":"registry.nutanixdemo.com\/docker.io"},{"type":"LOCAL","name":"REGISTRY_MIRROR_ENABLE","description":"","options":{"type":"PREDEFINED","choices":["false","true"]},"is_hidden":true,"is_mandatory":false,"data_type":"BASE","val_type":"STRING","label":"Enable private registry mirror","attrs":{"type":""},"value":"true"},{"type":"SECRET","name":"SSH_PASSWORD","description":"","is_hidden":true,"is_mandatory":false,"data_type":"BASE","val_type":"STRING","label":"Linux SSH password","attrs":{"type":"","is_secret_modified":false,"secret_reference":{}},"value":"1ScWUSUYg7gJny+42z0HlwZbA7VvJjQXZpTZX\/4nPeM57OE2EuV2m\/6DFA==:utf-8"},{"type":"SECRET","name":"NKP_LICENSE_KEY","description":"","is_hidden":false,"is_mandatory":false,"data_type":"BASE","val_type":"STRING","label":"NKP license key","attrs":{"type":"","is_secret_modified":false,"secret_reference":{}},"editables":{"value":true},"value":"BqbOG4RhDH8GeknlyBwlN7SROpXGkyp0LxORirOJEb9cfrHjO10pY988lj+F9RvdOxExZGtgLQfqLNVPa0GQCkC3okQI08gf+Q==:utf-8"},{"type":"LOCAL","name":"DOMAIN","description":"","is_hidden":true,"is_mandatory":false,"data_type":"BASE","val_type":"STRING","label":"AD domain","attrs":{"type":""},"value":"ntnxlab.local"},{"type":"LOCAL","name":"MGMT_LB_IP_RANGE_USERS_ENDS","description":"","is_hidden":false,"is_mandatory":true,"data_type":"BASE","val_type":"STRING","label":"External IPs for users LB services","attrs":{"type":""},"editables":{"value":true},"value":"10.38.35.58"},{"type":"LOCAL","name":"MGMT_LB_IP_RANGE_USERS_STARTS","description":"","is_hidden":false,"is_mandatory":true,"data_type":"BASE","val_type":"STRING","label":"External IPs for users LB services","attrs":{"type":""},"editables":{"value":true},"value":"10.38.35.39"},{"type":"LOCAL","name":"MGMT_LB_IP_RANGE_ENDS","description":"","is_hidden":false,"is_mandatory":true,"data_type":"BASE","val_type":"STRING","label":"NKP Apps VIP for MetalLB","attrs":{"type":""},"editables":{"value":true},"value":"10.38.35.16"},{"type":"LOCAL","name":"MGMT_LB_IP_RANGE_STARTS","description":"","is_hidden":false,"is_mandatory":true,"data_type":"BASE","val_type":"STRING","label":"NKP Apps VIP for MetalLB","attrs":{"type":""},"editables":{"value":true},"value":"10.38.35.16"},{"type":"LOCAL","name":"CONTROL_PLANE_VIP_ADDRESS","description":"","is_hidden":false,"is_mandatory":true,"data_type":"BASE","val_type":"STRING","label":"Control Plane VIP address","attrs":{"type":""},"editables":{"value":true},"value":"10.38.35.15"},{"type":"LOCAL","name":"NKP_BINARY_URL","description":"","is_hidden":false,"is_mandatory":true,"data_type":"BASE","val_type":"STRING","label":"URL for NKP CLI tarball","attrs":{"type":""},"editables":{"value":true},"value":"http:\/\/10.42.194.11\/workshop_staging\/tradeshows\/software\/nutanix\/kubernetes\/nkp\/nkp_v2.14.0_linux_amd64.tar.gz"},{"type":"LOCAL","name":"BINDDN","description":"","is_hidden":true,"is_mandatory":false,"data_type":"BASE","val_type":"STRING","label":"LDAP Bind User","attrs":{"type":""},"value":"cn=Administrator,cn=Users,dc=ntnxlab,dc=local"},{"type":"SECRET","name":"BINDPW","description":"","is_hidden":false,"is_mandatory":false,"data_type":"BASE","val_type":"STRING","label":"LDAP Bind User Password","attrs":{"type":"","is_secret_modified":false,"secret_reference":{}},"editables":{"value":true},"value":"jNTbbqJ5FYPDhQZitAED+3s\/mRCK16iAK4xJFg4VuJTiL\/1Y7JU8rYHHEQ==:utf-8"},{"type":"LOCAL","name":"LDAP_HOST","description":"","is_hidden":false,"is_mandatory":true,"data_type":"BASE","val_type":"STRING","label":"LDAP Host","attrs":{"type":""},"editables":{"value":true},"value":"10.38.35.6"},{"type":"LOCAL","name":"LDAP_PORT","description":"","regex":{"value":"^[\\d]*$","should_validate":false},"is_hidden":true,"is_mandatory":false,"data_type":"BASE","val_type":"INT","label":"LDAP Port","attrs":{"type":""},"value":"636"},{"type":"LOCAL","name":"NO_SSL","description":"","options":{"type":"PREDEFINED","choices":["false","true"]},"is_hidden":true,"is_mandatory":false,"data_type":"BASE","val_type":"STRING","label":"NO SSL","attrs":{"type":""},"value":"false"},{"type":"LOCAL","name":"SKIP_SSL_VERIFICATION","description":"","options":{"type":"PREDEFINED","choices":["false","true"]},"is_hidden":true,"is_mandatory":false,"data_type":"BASE","val_type":"STRING","label":"Skip SSL verification","attrs":{"type":""},"value":"true"},{"type":"LOCAL","name":"START_TLS","description":"","options":{"type":"PREDEFINED","choices":["false","true"]},"is_hidden":true,"is_mandatory":false,"data_type":"BASE","val_type":"STRING","label":"Start TLS","attrs":{"type":""},"value":"false"},{"type":"LOCAL","name":"LDAP_SEARCH_USERS","description":"","is_hidden":true,"is_mandatory":false,"data_type":"BASE","val_type":"STRING","label":"LDAP Search Users Path","attrs":{"type":""},"value":"cn=Users,dc=ntnxlab,dc=local"},{"type":"LOCAL","name":"LDAP_SEARCH_GROUPS","description":"","is_hidden":true,"is_mandatory":false,"data_type":"BASE","val_type":"STRING","label":"LDAP Search Groups Path","attrs":{"type":""},"value":"cn=Users,dc=ntnxlab,dc=local"},{"type":"LOCAL","name":"CLUSTER_NAME","description":"","is_hidden":true,"is_mandatory":false,"data_type":"BASE","val_type":"STRING","label":"NKP cluster name","attrs":{"type":""},"value":"nkp"},{"type":"LOCAL","name":"PC_ADDRESS","description":"","is_hidden":false,"is_mandatory":true,"data_type":"BASE","val_type":"STRING","label":"Prism Central IP address","attrs":{"type":""},"editables":{"value":true},"value":"10.38.35.7"},{"type":"LOCAL","name":"PC_PORT","description":"","regex":{"value":"^[\\d]*$","should_validate":false},"is_hidden":true,"is_mandatory":false,"data_type":"BASE","val_type":"INT","label":"Prism Central Port","attrs":{"type":""},"value":"9440"},{"type":"LOCAL","name":"MACHINE_TEMPLATE_IMAGE_NAME","description":"","is_hidden":true,"is_mandatory":false,"data_type":"BASE","val_type":"STRING","label":"Template name","attrs":{"type":""},"value":"nkp-rocky-9.5-release-1.31.4-20250214003015.qcow2"},{"type":"LOCAL","name":"PRISM_ELEMENT_CLUSTER_NAME","description":"","is_hidden":false,"is_mandatory":true,"data_type":"BASE","val_type":"STRING","label":"Prism Element cluster name","attrs":{"type":""},"editables":{"value":true},"value":"PHX-POC263"},{"type":"LOCAL","name":"PE_VIP_ADDRESS","description":"","is_hidden":false,"is_mandatory":true,"data_type":"BASE","val_type":"STRING","label":"Prism Element cluster IP","attrs":{"type":""},"editables":{"value":true},"value":"10.38.35.37"},{"type":"LOCAL","name":"SUBNET_NAME","description":"","is_hidden":true,"is_mandatory":false,"data_type":"BASE","val_type":"STRING","label":"Subnet name","attrs":{"type":""},"value":"primary"},{"type":"SECRET","name":"NUS_FS_API_PASSWORD","description":"","is_hidden":false,"is_mandatory":false,"data_type":"BASE","val_type":"STRING","label":"Files API password","attrs":{"type":"","is_secret_modified":false,"secret_reference":{}},"editables":{"value":true},"value":"T+3pFBXQ3ZTF9bvkDV65QYa4Lv6gTTkf0vZF9kE3W0nWXOaWgU9D4Wqc7g==:utf-8"},{"type":"LOCAL","name":"NUS_FS_API_USER","description":"","is_hidden":true,"is_mandatory":false,"data_type":"BASE","val_type":"STRING","label":"Files API user","attrs":{"type":""},"value":"csi"},{"type":"LOCAL","name":"NUS_FS_NAME","description":"","is_hidden":true,"is_mandatory":false,"data_type":"BASE","val_type":"STRING","label":"","attrs":{"type":""},"value":"files"},{"type":"LOCAL","name":"NAI_CORE_VERSION","description":"","options":{"type":"PREDEFINED","choices":[]},"is_hidden":false,"is_mandatory":false,"data_type":"BASE","val_type":"STRING","label":"","attrs":{"type":""},"value":"2.2"},{"type":"SECRET","name":"DOCKER_PW","description":"","options":{"type":"PREDEFINED","choices":[]},"is_hidden":false,"is_mandatory":false,"data_type":"BASE","val_type":"STRING","label":"","attrs":{"type":"SECRET","is_secret_modified":false,"secret_reference":{}},"value":"9rFMlrTqOHTNWl3SlrCzJn8UtoEqU7vDxcKr9Jf8\/nmiFkkCarhEaMVSb8OtpoJLf907dCoetZeyWrESsyt7cs3ASoA=:utf-8"},{"type":"LOCAL","name":"DOCKER_USERNAME","description":"","options":{"type":"PREDEFINED","choices":[]},"is_hidden":false,"is_mandatory":false,"data_type":"BASE","val_type":"STRING","label":"","attrs":{"type":""},"value":"ntnxsvcgpt"},{"type":"LOCAL","name":"DOCKER_EMAIL","description":"","options":{"type":"PREDEFINED","choices":[]},"is_hidden":false,"is_mandatory":false,"data_type":"BASE","val_type":"STRING","label":"","attrs":{"type":""},"value":"laura@nutanix.com"},{"type":"LOCAL","name":"HF_TOKEN","description":"","options":{"type":"PREDEFINED","choices":[]},"is_hidden":false,"is_mandatory":false,"data_type":"BASE","val_type":"STRING","label":"","attrs":{"type":""},"value":"asdf"},{"type":"SECRET","name":"NAI_NEW_PW","description":"","options":{"type":"PREDEFINED","choices":[]},"is_hidden":false,"is_mandatory":false,"data_type":"BASE","val_type":"STRING","label":"","attrs":{"type":"SECRET","is_secret_modified":false,"secret_reference":{}},"value":"\/YWmaieggTg9\/MhZg3n0DOX0cQlFEYQGr2z0adbrFdqe8DBpPTSIX3A=:utf-8"},{"type":"SECRET","name":"NAI_DEFAULT_PW","description":"","options":{"type":"PREDEFINED","choices":[]},"is_hidden":false,"is_mandatory":false,"data_type":"BASE","val_type":"STRING","label":"","attrs":{"type":"SECRET","is_secret_modified":false,"secret_reference":{}},"value":"FDX1gVi12JLMh7zR1DoP3sWHki2sCMtq8sqxcXbFhFS501mzX7gQLuFrig==:utf-8"}],"action_list":[],"deployment_create_list":[{"type":"GREENFIELD","name":"Admin_Deployment","description":"","variable_list":[],"action_list":[],"depends_on_list":[],"min_replicas":"1","max_replicas":"1","default_replicas":"","package_local_reference_list":[{"name":"Admin_Package","kind":"app_package"}],"substrate_local_reference":{"name":"Admin_Substrate","kind":"app_substrate"},"options":{"type":""},"published_service_local_reference_list":[]}],"snapshot_config_list":[],"restore_config_list":[],"environment_reference_list":[],"application_url":"","patch_list":[]}],"credential_definition_list":[{"type":"KEY","name":"CRED_SSH","description":"","editables":{"secret":true,"username":false},"username":"nutanix","secret":{"attrs":{"secret_reference":{},"is_secret_modified":true},"value":"i5cdknxMxEHYy3sqQEZN9ipw1v93p+ek7IazZx+UH9RYtQ95ib4PvEJx0yW5gklk6nX0zh0HaHn5sM1W4zO+4o1vAxp8okTlwSCm2TIoHKgddo6QCmuPiqN72QliFT7VuP3PhLbhMNuVGc1MTKXw9+QCbCm7GPoCW4kUq6nl8BzmhPPhkNGk74JLv9y7cPNkxsayauwikjRS+2txvtvEW+metNaGjovxKdhskzAnZInjuYc\/e5e8tl3Tgg+7pvrGnoJ0qq9T2658tIySF83jMNvGqueHbzgz\/5QZfI5VAtA828MpWLwfyqN5h7KjDgiAmSx8tqnGDsMS58MqT7D4kVVkzGpwWR0NSla4u8XzWlAxeI426bL+9xM\/dqTA1kXvkx4PVA5mT4yA7gpDAS9dDIg+TAXCRM8CO2ROEzfu5aFbraYzxJclvVLU\/d8j0npdCaQEJCVkBYpio3e58E2+uZnec35aUu9FGtbdheSdOJtWR5ysn5vcbsfof3cdCAAmsrpjwiJeN3q0HOlhHU5yFBoFjUBV1YR3gfC5NovbBzHsjJQbWMnEkUOR+R4TUd+HJ1k8ap53ZRm4s0gE\/GhNiCu04ixvzEGp\/BqlWNwa\/a4OkMN6Di\/Vit0vhHwX2sVdm8hilBk9BYh+m2lg+uNRUuYRXah1z1WzDaT3jOB8z92h\/m83v9hiYZ3c+5ebfyNCREidOjf8uzjWOWb91NVOlz0th9jVqclWwHW52KFq7HRRJckz5PEvrQisZpy\/hEibRzfYBkunTD0cznWjih9q2rUHCcJS1Bf4OMBoWGi6tuSv0E5\/fQF0ws6p+tD+yuCX1DTqBRJeXK51mecRSt4Gz4BivSD9jTwt1GkuzpnpyQnjXKd6srdVLcBjpFVPdDvq\/iwX5LIcgKSK7dJdyNzGNcMPLkYi97eACwJqmU4g8zPJn6uOjKDNscuQtcuo5Mg087U3G6HA8eXiGG\/AoVAWgZ\/GwIYQqtDURMq33g6fgVRZhKv2eiwiSFxsVs9sbzUgF7TYGSDa1t0L+OSIPe460gzlZnN6Ty7sOB8ZEOjNTDcut0HXA+ifFrgBBL19KF2wkcFgfKBNBgMQJyUpomdIEk0cXtPqWPpufH2Av1dlLQ113i6rgnkQazUIiuVk6LUE1IE2Ynbf+M5lXan2c1cQZjGmx+WGrthS6f0LQWkVp8XjLzXSjOHO3oW9\/+FQXYEi+KmsUgJc7o356W1XqrbXWZnpl7b87nASO6s7daD29hp5Bn6F\/V2HKPWRxJQsOqbnQXXZq5geUAq8uFzZxKjqOdyxb+ABVB76tnqzpFQzk5WoLI2rUR\/4MPxkDXNtkNSySIbHe4YV9WwE3Ci17XNJGuVuHuEq0meyyFZEW\/F0eFhpu8jwmxbl81SD0xBhKt5aeIefnJNaAZx\/xxECwGY0w0MRuZlHWQzM4QJrkUzsA7abAf5epebmaQ\/6Zx15umYGv+1r2nWlx31TC16U5LlOXo074DdQTmtAQRzrbWhsqPZ9xZFD2xiK3tOYcQ7FK7XJHI3hni9KMcU\/nYeP7LZDQ2Czb+49Zy0AmW7r9B8SxNADqziX5L4oGLsq1CS4J4TsY8l\/whj+D7AViHzV0zC5WPbkEAPG25VMyoBcMBhzSnM2rd13Ngb2Kvylq7sa3DoRfMdOF6XD2uXomResIWvngcMZxpKOTl4wYTQq3fZyc92wlMauPxidFayslzk\/ofBWoDTMgO4WG4bw9f9gaDFBfn16q4wcsiXYBrbSUeTKM36apXopEkuMz1H3Hed1ZsArqALBLs77x1VnsNzBZYxnMaFLqfQJfK9r7lYpvi9XwZj1zHR5ZPhXdWW1UpxPEIuC4dSRK2V2+K8yMDsMAlKgXXjsebafWqkbx15dH2G4PiO6xTYu8I8SQWtCij4JsYz\/beL5hHsMDfqeS7hvlH3uvfrjyRE1bAZKbEqF6u21oEx7LTF3M5ZTt0cbd7MZBgSspeaVNef1Rr7hT\/L96X3PFsC2qI4yPPpxOkHqI9Yj41YA\/caoHdEV07UKhXvXBnLVjMj8OBqvK1wV+g9\/X8AZk3hEFfuxfYV3fcNitJn+rwIO04WUNUQOjVZoci1+gTUrGHlhEvNpD8YXgv\/a2bWWpgJquBhVMITMcGvThPyufsnwTAvrvZd2HqxVVkwXkYxYRm6sIq18Fv\/t6G3uutunoKC\/ZoWhTtqbkMv4\/IM9GSYArVWiHycG5fgNCvxpPeINUc3DJkcetKT6QmlvNfNWXwLgUWeMYriCgnhGvns8oHO1E4L7+lsstif2\/Ty\/xUQedwxd+eY0verLiBpQOQJftTjICLZnYma3Q5aXOQWrgxAdF77dBmQyfKo\/zmNizGOXerGPpQAG2JjrdahaJ8xRciFZvFITQfA5r6qgN0orB1tBGV9UAQYv5fpUUrkRGeTVnmLcQxVyQrIYCbRUBFjjHInTIhPviVeO6X+J48pMEr6f3jMMuMZTd\/hyRX65NwkPV574U8l\/50emkV3yq8RmTLF4P2lI8XhWC23hBnOdCzJSw\/tV4oE0UWcXDsZ7Tjj4AihLcAyZ+ysYNkws4Gd1f10kAg5oxNLUXkxRN9BUnsf8NpEe5O9e88Mxyss7rGvtZSSp2zr8J5klniJK7V8gHUE4Rk+3vBVwR\/yJwoD2PLp9vOueKpH7GW\/wKmMHBm0EGrSUxCLASvN5Pi835qpkEo2QLlRLGqEPf7RcUWfe8xrhM0LvlUuSH8+25unGXTbUuxCJv7RtcOeUEtvZHuEQT6B\/6rEdP7d89UoneMaPPe7L2ALZ+DGpl7PWU5pWYCcF0MPN4T0ijol5BgyGDrOmWgXDlf9v3ciWptWjdV6ZildLEnNLtBu2KovXtpepdNqydGtqYL1gq5s8gC9pR9fqbdheIZ8f71S82k027kSBl4FXN2WjocbVq62Zcdq1yFGEaRVK+JXc5pRorg9aHcnpslWYPhgGCb6Swp0LsqvaZe6joTTu2vMQNrlJkfBR0T+MbDOncXWs1v3A62hrXfmAYrwDMBEsDo34qjDktsPGAHLWMabh\/Cuy9UMlQs3CjwPLFXE+MVpQe\/hYGX8kgi8IF9Ij8\/ga1OAhNTkdMx1yOAxVWmwp1kUTc+K\/GfTqC817oQKhZLmX2VlnL3bV1YHodpa8J87SZAdqd+wQueXqfSaTOVUZK\/arvpB8m8oirdzJq5XIOG5e8iGbLKinqIELAgu7zbUBTX5dKBzE8N3JphXAMWEwMzbGC7jiKrIJi+mxJr0X4voqwXybKUmhcZhkt4PY9vk1wreSCDKrHMzjZvLOOEZfMdmhbFnx\/QS8EXKwrYSnXNvK5wbJunEj33zDzybn3hOCsLUUqiUagLEGCJm7DV8NHHPpMDuB+Xxu+Jx8sKnIBs9ohURhyhY5tg\/CK\/m0bWcyoK1hZM2Vmg20oF402plbDgCAUHHpBcjdb2M0YgHDb80gKuWf9qAvEumf4FvStBvEZ+Wzl3UvCgUVhhJGOO1eqn1lHcCmqgL3MEnQ0mLmrH0E9dOsYLUVHfgjDlVIkCiqeViZt59TzlsbkstTleiVh0x+RJQqbTnJbe3BcYsAiUrSC9JszAps2I54VI2GiFYwGB4udEJEfITPnEMynM3eSZRr6L+6rjHHmh+MeWe2EGPBw7UI3jw+C1AibRPUCtJ7dkhStY1oBO3DbsuV7xdcgXEZDJHv3zJWH0vbW4pnvA8b9RefBj4aKRG+aQqyhUPmFu3sBZ+CbDfB0gO2AmVpgkoVlaLMx31sNfHem0OuOfcdBUHKbQ8HeVajLzQpPfEqalT+75q3PGnRWHca3hVoMjhMYrpnfBLzvRSl75Vmqw5M1F\/V7p0ZuSnES4cKX2H\/PHZJUBR605VZ5Abk9OzdJyhe2ymru3\/9Un3Se4ScImTzLb1dG4DEkYoPJO5rJlTeqqmOQn6urbbXBefwX9BH+SeRN6dnDjfVh0FhqDq7NDo23v\/vWrpnv7Tp7c\/JjyfVqkmyGoyQxVOGJ2Nppsz6jD2q1buEX3kinUsLogG1ZJG5XCqmj9LqadLWrYSviJLCKQul+gx\/Z9RdRXavmmineZMN7or8eRAH726fIi4lCLNFOfD6WAf7nSSe2rKwNcxdfL2+SOPoq4KmpVMt3sbjfLkSgnYYyukw18yBJwdGzji8PCWbUzL7r74TvaXThuIY0VqWSme+eS4OEIJRMu8wKy6Cm5185\/Q9Yzy5MiDYMBRhfacW2h7lUGUoaLjD2xqHVNRVFLOXP7BwJxQ4YrJp9By2Yaf6BapByHfFTZm9T5O1Uuw5pcmns2CIEeERi2aCywcKX7wSvaX9v2ZyT4TNg2K0NCa4DbggmvHBJeYneKtqhmPWQC6MHUNG:utf-8"},"cred_class":"static"},{"type":"PASSWORD","name":"CRED_PC","description":"","editables":{"secret":true,"username":false},"username":"admin","secret":{"attrs":{"secret_reference":{},"is_secret_modified":true},"value":"w2tI+WscMPwpMBybVgh8b7UmmVe7JBXHwMkL4xWlfWcBs13NKppEt9AcNg==:utf-8"},"cred_class":"static"}],"default_credential_local_reference":{"name":"CRED_SSH","kind":"app_credential"},"type":"USER","client_attrs":{"null":{"Service":{"Admin":{"dsl_name":"Admin","Action":{}}},"Package":{"Admin_Package":{"dsl_name":"Admin_Package","Action":{}},"NKP_213_ROCKY_95":{"dsl_name":"NKP_213_ROCKY_95","Action":{}}},"Deployment":{"Admin_Deployment":{"dsl_name":"Admin_Deployment","Action":{}}},"Profile":{"Nutanix":{"dsl_name":"Nutanix","Action":{}}},"Substrate":{"Admin_Substrate":{"dsl_name":"Admin_Substrate","Action":{},"AhvVm":{"@@{calm_application_name}@@-boot":{"dsl_name":"Admin_AhvVm"}}}}},"Admin_Deployment":{"x":-1592.5,"y":-632}}}},"api_version":"3.0","product_version":"3.8.1","metadata":{"last_update_time":"1743704644198214","creation_time":"1743703521510011","spec_version":7,"name":"next25-nkp-nai","kind":"blueprint"},"contains_secrets":true}